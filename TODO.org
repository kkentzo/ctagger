* Milestones
** DONE consume all info from demo.yml (with a global indexer)
** DONE work on Indexer#Index (remove hard-coded stuff / parameterize command )
** DONE Implement Indexer#GetGenericArguments()
** DONE implement flags for debug mode
** DONE read yml from command line or home directory
** DONE Monitor all specified projects
* Further work
** DONE Implement Default Indexer and Project (in cwd)
** DONE Implement project manager
** DONE Fix RecursiveWatcher impl ;; trigger @ recursive watcher
*** it should come as an argument to method
** DONE Rename RecursiveWatcher to Watcher
** DONE Parameterize indexer frequency
** DONE Write tests for Watcher
** DONE Add tests for watcher exclusions
** DONE Add an http interface for adding projects / reloading demo / stopping
** DONE Introduce cancellation contexts for project / watcher
** DONE Refactor Watcher / Project relationship
** DONE Indexer stuff
*** REJECTED introduce per-project indexers in configuration (with merge logic)
*** generalize indexer?? (default is ruby specific)
*** REJECTED split indexer logic to root and libs??
**** ruby-specific: activate libs indexing when Gemfile.lock changes
**** but doesn't this mean that we have to keep separate tags files (a-la guard)??
***** should/could we keep the TAG files in-memory?? too expensive?
***** perhaps introduce HOT projects?? (for in-memory processing)
** DONE introduce mock dependencies for testing manager, project, indexer
** DONE Revisit GenericIndexer naming
*** a GenericIndexer includes a Type which can be Rvm => not good
*** think about *able (instead of *er) naming pattern for interfaces
** DONE Work on Watcher tests
*** DONE Test Watcher#Watch by mocking FsWatcher
*** DONE Move add, remove (and pathset field) to FsWatcher
*** DONE Test these ^^^ (functionally)
*** DONE Move discover to FsWatcher (as a func)
** DONE Implement Smart Indexer with SpecialFile
*** DONE do not reindex project + gems everytime -- only when special file changes
*** DONE Consume Event#IsSpecial in Project#Monitor and Indexer#Index
*** DONE keep two files and concat to one in any case
*** DONE Unit Tests for all new Indexer methods
** TODO Restructure code in packages
** Design polymorphic Indexer
*** currently we have generic and rvm; there should be a better process
** Include whitelist globs in watcher (e.g. *.rb for files)
** Cleanups + TODOs
** Write README
** Banners on README (go report, CI build, coverage)
** Advertise!! Publish!!
** Configure logger properly (timestamp, prefixes)
* More advanced features
** Adaptive indexing - Measure indexing time per project - adjust maxFrequency accordingly
** In-memory tag indexing and processing ???
** Change PathSet to PathTree for filesystem
*** implement additions, removals, sub-tree pruning, search
